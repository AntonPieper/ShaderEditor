//
// Created by Anton Pieper on 10.07.23.
//

#ifndef SHADEREDITOR_APP_SRC_MAIN_CPP_LEXER_C_KEYWORDS_H_
#define SHADEREDITOR_APP_SRC_MAIN_CPP_LEXER_C_KEYWORDS_H_

#include <stddef.h>

#include "token_type.h"

typedef struct KeywordToken {
  TokenType type;
  const char *const name;
} KeywordToken;

// Keyword lookup
static const KeywordToken KEYWORDS[] = {
    {.type = CONST, .name = "const"},
    {.type = BOOL, .name = "bool"},
    {.type = FLOAT, .name = "float"},
    {.type = INT, .name = "int"},
    {.type = UINT, .name = "uint"},
    {.type = DOUBLE, .name = "double"},
    {.type = BVEC2, .name = "bvec2"},
    {.type = BVEC3, .name = "bvec3"},
    {.type = BVEC4, .name = "bvec4"},
    {.type = IVEC2, .name = "ivec2"},
    {.type = IVEC3, .name = "ivec3"},
    {.type = IVEC4, .name = "ivec4"},
    {.type = UVEC2, .name = "uvec2"},
    {.type = UVEC3, .name = "uvec3"},
    {.type = UVEC4, .name = "uvec4"},
    {.type = VEC2, .name = "vec2"},
    {.type = VEC3, .name = "vec3"},
    {.type = VEC4, .name = "vec4"},
    {.type = MAT2, .name = "mat2"},
    {.type = MAT3, .name = "mat3"},
    {.type = MAT4, .name = "mat4"},
    {.type = MAT2X2, .name = "mat2x2"},
    {.type = MAT2X3, .name = "mat2x3"},
    {.type = MAT2X4, .name = "mat2x4"},
    {.type = MAT3X2, .name = "mat3x2"},
    {.type = MAT3X3, .name = "mat3x3"},
    {.type = MAT3X4, .name = "mat3x4"},
    {.type = MAT4X2, .name = "mat4x2"},
    {.type = MAT4X3, .name = "mat4x3"},
    {.type = MAT4X4, .name = "mat4x4"},
    {.type = DVEC2, .name = "dvec2"},
    {.type = DVEC3, .name = "dvec3"},
    {.type = DVEC4, .name = "dvec4"},
    {.type = DMAT2, .name = "dmat2"},
    {.type = DMAT3, .name = "dmat3"},
    {.type = DMAT4, .name = "dmat4"},
    {.type = DMAT2X2, .name = "dmat2x2"},
    {.type = DMAT2X3, .name = "dmat2x3"},
    {.type = DMAT2X4, .name = "dmat2x4"},
    {.type = DMAT3X2, .name = "dmat3x2"},
    {.type = DMAT3X3, .name = "dmat3x3"},
    {.type = DMAT3X4, .name = "dmat3x4"},
    {.type = DMAT4X2, .name = "dmat4x2"},
    {.type = DMAT4X3, .name = "dmat4x3"},
    {.type = DMAT4X4, .name = "dmat4x4"},
    {.type = CENTROID, .name = "centroid"},
    {.type = IN, .name = "in"},
    {.type = OUT, .name = "out"},
    {.type = INOUT, .name = "inout"},
    {.type = UNIFORM, .name = "uniform"},
    {.type = PATCH, .name = "patch"},
    {.type = SAMPLE, .name = "sample"},
    {.type = BUFFER, .name = "buffer"},
    {.type = SHARED, .name = "shared"},
    {.type = COHERENT, .name = "coherent"},
    {.type = VOLATILE, .name = "volatile"},
    {.type = RESTRICT, .name = "restrict"},
    {.type = READONLY, .name = "readonly"},
    {.type = WRITEONLY, .name = "writeonly"},
    {.type = NOPERSPECTIVE, .name = "noperspective"},
    {.type = FLAT, .name = "flat"},
    {.type = SMOOTH, .name = "smooth"},
    {.type = LAYOUT, .name = "layout"},
    {.type = ATOMIC_UINT, .name = "atomic_uint"},
    {.type = SAMPLER2D, .name = "sampler2D"},
    {.type = SAMPLER3D, .name = "sampler3D"},
    {.type = SAMPLERCUBE, .name = "samplerCube"},
    {.type = SAMPLER2DSHADOW, .name = "sampler2DShadow"},
    {.type = SAMPLERCUBESHADOW, .name = "samplerCubeShadow"},
    {.type = SAMPLER2DARRAY, .name = "sampler2DArray"},
    {.type = SAMPLER2DARRAYSHADOW, .name = "sampler2DArrayShadow"},
    {.type = ISAMPLER2D, .name = "isampler2D"},
    {.type = ISAMPLER3D, .name = "isampler3D"},
    {.type = ISAMPLERCUBE, .name = "isamplerCube"},
    {.type = ISAMPLER2DARRAY, .name = "isampler2DArray"},
    {.type = USAMPLER2D, .name = "usampler2D"},
    {.type = USAMPLER3D, .name = "usampler3D"},
    {.type = USAMPLERCUBE, .name = "usamplerCube"},
    {.type = USAMPLER2DARRAY, .name = "usampler2DArray"},
    {.type = SAMPLER1D, .name = "sampler1D"},
    {.type = SAMPLER1DSHADOW, .name = "sampler1DShadow"},
    {.type = SAMPLER1DARRAY, .name = "sampler1DArray"},
    {.type = SAMPLER1DARRAYSHADOW, .name = "sampler1DArrayShadow"},
    {.type = ISAMPLER1D, .name = "isampler1D"},
    {.type = ISAMPLER1DARRAY, .name = "isampler1DArray"},
    {.type = USAMPLER1D, .name = "usampler1D"},
    {.type = USAMPLER1DARRAY, .name = "usampler1DArray"},
    {.type = SAMPLER2DRECT, .name = "sampler2DRect"},
    {.type = SAMPLER2DRECTSHADOW, .name = "sampler2DRectShadow"},
    {.type = ISAMPLER2DRECT, .name = "isampler2DRect"},
    {.type = USAMPLER2DRECT, .name = "usampler2DRect"},
    {.type = SAMPLERBUFFER, .name = "samplerbuffer"},
    {.type = ISAMPLERBUFFER, .name = "isamplerbuffer"},
    {.type = USAMPLERBUFFER, .name = "usamplerbuffer"},
    {.type = SAMPLERCUBEARRAY, .name = "samplerCubeArray"},
    {.type = SAMPLERCUBEARRAYSHADOW, .name = "samplerCubeArrayShadow"},
    {.type = ISAMPLERCUBEARRAY, .name = "isamplerCubeArray"},
    {.type = USAMPLERCUBEARRAY, .name = "usamplerCubeArray"},
    {.type = SAMPLER2DMS, .name = "sampler2DMS"},
    {.type = ISAMPLER2DMS, .name = "isampler2DMS"},
    {.type = USAMPLER2DMS, .name = "usampler2DMS"},
    {.type = SAMPLER2DMSARRAY, .name = "sampler2DMSArray"},
    {.type = ISAMPLER2DMSARRAY, .name = "isampler2DMSArray"},
    {.type = USAMPLER2DMSARRAY, .name = "usampler2DMSArray"},
    {.type = IMAGE2D, .name = "image2D"},
    {.type = IIMAGE2D, .name = "iimage2D"},
    {.type = UIMAGE2D, .name = "uimage2D"},
    {.type = IMAGE3D, .name = "image3D"},
    {.type = IIMAGE3D, .name = "iimage3D"},
    {.type = UIMAGE3D, .name = "uimage3D"},
    {.type = IMAGECUBE, .name = "imageCube"},
    {.type = IIMAGECUBE, .name = "iimageCube"},
    {.type = UIMAGECUBE, .name = "uimageCube"},
    {.type = IMAGEBUFFER, .name = "imagebuffer"},
    {.type = IIMAGEBUFFER, .name = "iimagebuffer"},
    {.type = UIMAGEBUFFER, .name = "uimagebuffer"},
    {.type = IMAGE2DARRAY, .name = "image2DArray"},
    {.type = IIMAGE2DARRAY, .name = "iimage2DArray"},
    {.type = UIMAGE2DARRAY, .name = "uimage2DArray"},
    {.type = IMAGECUBEARRAY, .name = "imageCubeArray"},
    {.type = IIMAGECUBEARRAY, .name = "iimageCubeArray"},
    {.type = UIMAGECUBEARRAY, .name = "uimageCubeArray"},
    {.type = IMAGE1D, .name = "image1D"},
    {.type = IIMAGE1D, .name = "iimage1D"},
    {.type = UIMAGE1D, .name = "uimage1D"},
    {.type = IMAGE1DARRAY, .name = "image1DArray"},
    {.type = IIMAGE1DARRAY, .name = "iimage1DArray"},
    {.type = UIMAGE1DARRAY, .name = "iimage1DArray"},
    {.type = IMAGE2DRECT, .name = "image2DRect"},
    {.type = IIMAGE2DRECT, .name = "iimage2DRect"},
    {.type = UIMAGE2DRECT, .name = "uimage2DRect"},
    {.type = IMAGE2DMS, .name = "image2DMS"},
    {.type = IIMAGE2DMS, .name = "iimage2DMS"},
    {.type = UIMAGE2DMS, .name = "uimage2DMS"},
    {.type = IMAGE2DMSARRAY, .name = "image2DMSArray"},
    {.type = IIMAGE2DMSARRAY, .name = "iimage2DMSArray"},
    {.type = UIMAGE2DMSARRAY, .name = "uimage2DMSArray"},
    {.type = STRUCT, .name = "struct"},
    {.type = VOID, .name = "void"},
    {.type = WHILE, .name = "while"},
    {.type = BREAK, .name = "break"},
    {.type = CONTINUE, .name = "continue"},
    {.type = DO, .name = "do"},
    {.type = ELSE, .name = "else"},
    {.type = FOR, .name = "for"},
    {.type = IF, .name = "if"},
    {.type = DISCARD, .name = "discard"},
    {.type = RETURN, .name = "return"},
    {.type = SWITCH, .name = "switch"},
    {.type = CASE, .name = "case"},
    {.type = DEFAULT, .name = "default"},
    {.type = SUBROUTINE, .name = "subroutine"},
    {.type = INVARIANT, .name = "invariant"},
    {.type = PRECISE, .name = "precise"},
    {.type = HIGH_PRECISION, .name = "highp"},
    {.type = MEDIUM_PRECISION, .name = "mediump"},
    {.type = LOW_PRECISION, .name = "lowp"},
    {.type = PRECISION, .name = "precision"},
    // builtins taken from taken from
    // https://registry.khronos.org/OpenGL-Refpages/gl4/index.php
    {.name = "abs", .type = BUILTIN_FUNCTION},
    {.name = "acos", .type = BUILTIN_FUNCTION},
    {.name = "acosh", .type = BUILTIN_FUNCTION},
    {.name = "all", .type = BUILTIN_FUNCTION},
    {.name = "any", .type = BUILTIN_FUNCTION},
    {.name = "asin", .type = BUILTIN_FUNCTION},
    {.name = "asinh", .type = BUILTIN_FUNCTION},
    {.name = "atan", .type = BUILTIN_FUNCTION},
    {.name = "atanh", .type = BUILTIN_FUNCTION},
    {.name = "atomicAdd", .type = BUILTIN_FUNCTION},
    {.name = "atomicAnd", .type = BUILTIN_FUNCTION},
    {.name = "atomicCompSwap", .type = BUILTIN_FUNCTION},
    {.name = "atomicCounter", .type = BUILTIN_FUNCTION},
    {.name = "atomicCounterDecrement", .type = BUILTIN_FUNCTION},
    {.name = "atomicCounterIncrement", .type = BUILTIN_FUNCTION},
    {.name = "atomicExchange", .type = BUILTIN_FUNCTION},
    {.name = "atomicMax", .type = BUILTIN_FUNCTION},
    {.name = "atomicMin", .type = BUILTIN_FUNCTION},
    {.name = "atomicOr", .type = BUILTIN_FUNCTION},
    {.name = "atomicXor", .type = BUILTIN_FUNCTION},
    {.name = "barrier", .type = BUILTIN_FUNCTION},
    {.name = "bitCount", .type = BUILTIN_FUNCTION},
    {.name = "bitfieldExtract", .type = BUILTIN_FUNCTION},
    {.name = "bitfieldInsert", .type = BUILTIN_FUNCTION},
    {.name = "bitfieldReverse", .type = BUILTIN_FUNCTION},
    {.name = "ceil", .type = BUILTIN_FUNCTION},
    {.name = "clamp", .type = BUILTIN_FUNCTION},
    {.name = "cos", .type = BUILTIN_FUNCTION},
    {.name = "cosh", .type = BUILTIN_FUNCTION},
    {.name = "cross", .type = BUILTIN_FUNCTION},
    {.name = "degrees", .type = BUILTIN_FUNCTION},
    {.name = "determinant", .type = BUILTIN_FUNCTION},
    {.name = "dFdx", .type = BUILTIN_FUNCTION},
    {.name = "dFdxCoarse", .type = BUILTIN_FUNCTION},
    {.name = "dFdxFine", .type = BUILTIN_FUNCTION},
    {.name = "dFdy", .type = BUILTIN_FUNCTION},
    {.name = "dFdyCoarse", .type = BUILTIN_FUNCTION},
    {.name = "dFdyFine", .type = BUILTIN_FUNCTION},
    {.name = "distance", .type = BUILTIN_FUNCTION},
    {.name = "dot", .type = BUILTIN_FUNCTION},
    {.name = "EmitStreamVertex", .type = BUILTIN_FUNCTION},
    {.name = "EmitVertex", .type = BUILTIN_FUNCTION},
    {.name = "EndPrimitive", .type = BUILTIN_FUNCTION},
    {.name = "EndStreamPrimitive", .type = BUILTIN_FUNCTION},
    {.name = "equal", .type = BUILTIN_FUNCTION},
    {.name = "exp", .type = BUILTIN_FUNCTION},
    {.name = "exp2", .type = BUILTIN_FUNCTION},
    {.name = "faceforward", .type = BUILTIN_FUNCTION},
    {.name = "findLSB", .type = BUILTIN_FUNCTION},
    {.name = "findMSB", .type = BUILTIN_FUNCTION},
    {.name = "floatBitsToInt", .type = BUILTIN_FUNCTION},
    {.name = "floatBitsToUint", .type = BUILTIN_FUNCTION},
    {.name = "floor", .type = BUILTIN_FUNCTION},
    {.name = "fma", .type = BUILTIN_FUNCTION},
    {.name = "fract", .type = BUILTIN_FUNCTION},
    {.name = "frexp", .type = BUILTIN_FUNCTION},
    {.name = "fwidth", .type = BUILTIN_FUNCTION},
    {.name = "fwidthCoarse", .type = BUILTIN_FUNCTION},
    {.name = "fwidthFine", .type = BUILTIN_FUNCTION},
    {.name = "gl_ClipDistance", .type = BUILTIN_FUNCTION},
    {.name = "gl_CullDistance", .type = BUILTIN_FUNCTION},
    {.name = "gl_FragCoord", .type = BUILTIN_FUNCTION},
    {.name = "gl_FragDepth", .type = BUILTIN_FUNCTION},
    {.name = "gl_FrontFacing", .type = BUILTIN_FUNCTION},
    {.name = "gl_GlobalInvocationID", .type = BUILTIN_FUNCTION},
    {.name = "gl_HelperInvocation", .type = BUILTIN_FUNCTION},
    {.name = "gl_InstanceID", .type = BUILTIN_FUNCTION},
    {.name = "gl_InvocationID", .type = BUILTIN_FUNCTION},
    {.name = "gl_Layer", .type = BUILTIN_FUNCTION},
    {.name = "gl_LocalInvocationID", .type = BUILTIN_FUNCTION},
    {.name = "gl_LocalInvocationIndex", .type = BUILTIN_FUNCTION},
    {.name = "gl_NumSamples", .type = BUILTIN_FUNCTION},
    {.name = "gl_NumWorkGroups", .type = BUILTIN_FUNCTION},
    {.name = "gl_PatchVerticesIn", .type = BUILTIN_FUNCTION},
    {.name = "gl_PointCoord", .type = BUILTIN_FUNCTION},
    {.name = "gl_PointSize", .type = BUILTIN_FUNCTION},
    {.name = "gl_Position", .type = BUILTIN_FUNCTION},
    {.name = "gl_PrimitiveID", .type = BUILTIN_FUNCTION},
    {.name = "gl_PrimitiveIDIn", .type = BUILTIN_FUNCTION},
    {.name = "gl_SampleID", .type = BUILTIN_FUNCTION},
    {.name = "gl_SampleMask", .type = BUILTIN_FUNCTION},
    {.name = "gl_SampleMaskIn", .type = BUILTIN_FUNCTION},
    {.name = "gl_SamplePosition", .type = BUILTIN_FUNCTION},
    {.name = "gl_TessCoord", .type = BUILTIN_FUNCTION},
    {.name = "gl_TessLevelInner", .type = BUILTIN_FUNCTION},
    {.name = "gl_TessLevelOuter", .type = BUILTIN_FUNCTION},
    {.name = "gl_VertexID", .type = BUILTIN_FUNCTION},
    {.name = "gl_ViewportIndex", .type = BUILTIN_FUNCTION},
    {.name = "gl_WorkGroupID", .type = BUILTIN_FUNCTION},
    {.name = "gl_WorkGroupSize", .type = BUILTIN_FUNCTION},
    {.name = "greaterThan", .type = BUILTIN_FUNCTION},
    {.name = "greaterThanEqual", .type = BUILTIN_FUNCTION},
    {.name = "groupMemoryBarrier", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicAdd", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicAnd", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicCompSwap", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicExchange", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicMax", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicMin", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicOr", .type = BUILTIN_FUNCTION},
    {.name = "imageAtomicXor", .type = BUILTIN_FUNCTION},
    {.name = "imageLoad", .type = BUILTIN_FUNCTION},
    {.name = "imageSamples", .type = BUILTIN_FUNCTION},
    {.name = "imageSize", .type = BUILTIN_FUNCTION},
    {.name = "imageStore", .type = BUILTIN_FUNCTION},
    {.name = "imulExtended", .type = BUILTIN_FUNCTION},
    {.name = "intBitsToFloat", .type = BUILTIN_FUNCTION},
    {.name = "interpolateAtCentroid", .type = BUILTIN_FUNCTION},
    {.name = "interpolateAtOffset", .type = BUILTIN_FUNCTION},
    {.name = "interpolateAtSample", .type = BUILTIN_FUNCTION},
    {.name = "inverse", .type = BUILTIN_FUNCTION},
    {.name = "inversesqrt", .type = BUILTIN_FUNCTION},
    {.name = "isinf", .type = BUILTIN_FUNCTION},
    {.name = "isnan", .type = BUILTIN_FUNCTION},
    {.name = "ldexp", .type = BUILTIN_FUNCTION},
    {.name = "length", .type = BUILTIN_FUNCTION},
    {.name = "lessThan", .type = BUILTIN_FUNCTION},
    {.name = "lessThanEqual", .type = BUILTIN_FUNCTION},
    {.name = "log", .type = BUILTIN_FUNCTION},
    {.name = "log2", .type = BUILTIN_FUNCTION},
    {.name = "matrixCompMult", .type = BUILTIN_FUNCTION},
    {.name = "max", .type = BUILTIN_FUNCTION},
    {.name = "memoryBarrier", .type = BUILTIN_FUNCTION},
    {.name = "memoryBarrierAtomicCounter", .type = BUILTIN_FUNCTION},
    {.name = "memoryBarrierBuffer", .type = BUILTIN_FUNCTION},
    {.name = "memoryBarrierImage", .type = BUILTIN_FUNCTION},
    {.name = "memoryBarrierShared", .type = BUILTIN_FUNCTION},
    {.name = "min", .type = BUILTIN_FUNCTION},
    {.name = "mix", .type = BUILTIN_FUNCTION},
    {.name = "mod", .type = BUILTIN_FUNCTION},
    {.name = "modf", .type = BUILTIN_FUNCTION},
    {.name = "noise", .type = BUILTIN_FUNCTION},
    {.name = "noise1", .type = BUILTIN_FUNCTION},
    {.name = "noise2", .type = BUILTIN_FUNCTION},
    {.name = "noise3", .type = BUILTIN_FUNCTION},
    {.name = "noise4", .type = BUILTIN_FUNCTION},
    {.name = "normalize", .type = BUILTIN_FUNCTION},
    {.name = "not", .type = BUILTIN_FUNCTION},
    {.name = "notEqual", .type = BUILTIN_FUNCTION},
    {.name = "outerProduct", .type = BUILTIN_FUNCTION},
    {.name = "packDouble2x32", .type = BUILTIN_FUNCTION},
    {.name = "packHalf2x16", .type = BUILTIN_FUNCTION},
    {.name = "packSnorm2x16", .type = BUILTIN_FUNCTION},
    {.name = "packSnorm4x8", .type = BUILTIN_FUNCTION},
    {.name = "packUnorm", .type = BUILTIN_FUNCTION},
    {.name = "packUnorm2x16", .type = BUILTIN_FUNCTION},
    {.name = "packUnorm4x8", .type = BUILTIN_FUNCTION},
    {.name = "pow", .type = BUILTIN_FUNCTION},
    {.name = "radians", .type = BUILTIN_FUNCTION},
    {.name = "reflect", .type = BUILTIN_FUNCTION},
    {.name = "refract", .type = BUILTIN_FUNCTION},
    {.name = "round", .type = BUILTIN_FUNCTION},
    {.name = "roundEven", .type = BUILTIN_FUNCTION},
    {.name = "sign", .type = BUILTIN_FUNCTION},
    {.name = "sin", .type = BUILTIN_FUNCTION},
    {.name = "sinh", .type = BUILTIN_FUNCTION},
    {.name = "smoothstep", .type = BUILTIN_FUNCTION},
    {.name = "sqrt", .type = BUILTIN_FUNCTION},
    {.name = "step", .type = BUILTIN_FUNCTION},
    {.name = "tan", .type = BUILTIN_FUNCTION},
    {.name = "tanh", .type = BUILTIN_FUNCTION},
    {.name = "texelFetch", .type = BUILTIN_FUNCTION},
    {.name = "texelFetchOffset", .type = BUILTIN_FUNCTION},
    {.name = "texture", .type = BUILTIN_FUNCTION},
    {.name = "textureGather", .type = BUILTIN_FUNCTION},
    {.name = "textureGatherOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureGatherOffsets", .type = BUILTIN_FUNCTION},
    {.name = "textureGrad", .type = BUILTIN_FUNCTION},
    {.name = "textureGradOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureLod", .type = BUILTIN_FUNCTION},
    {.name = "textureLodOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureProj", .type = BUILTIN_FUNCTION},
    {.name = "textureProjGrad", .type = BUILTIN_FUNCTION},
    {.name = "textureProjGradOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureProjLod", .type = BUILTIN_FUNCTION},
    {.name = "textureProjLodOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureProjOffset", .type = BUILTIN_FUNCTION},
    {.name = "textureQueryLevels", .type = BUILTIN_FUNCTION},
    {.name = "textureQueryLod", .type = BUILTIN_FUNCTION},
    {.name = "textureSamples", .type = BUILTIN_FUNCTION},
    {.name = "textureSize", .type = BUILTIN_FUNCTION},
    {.name = "transpose", .type = BUILTIN_FUNCTION},
    {.name = "trunc", .type = BUILTIN_FUNCTION},
    {.name = "uaddCarry", .type = BUILTIN_FUNCTION},
    {.name = "uintBitsToFloat", .type = BUILTIN_FUNCTION},
    {.name = "umulExtended", .type = BUILTIN_FUNCTION},
    {.name = "unpackDouble2x32", .type = BUILTIN_FUNCTION},
    {.name = "unpackHalf2x16", .type = BUILTIN_FUNCTION},
    {.name = "unpackSnorm2x16", .type = BUILTIN_FUNCTION},
    {.name = "unpackSnorm4x8", .type = BUILTIN_FUNCTION},
    {.name = "unpackUnorm", .type = BUILTIN_FUNCTION},
    {.name = "unpackUnorm2x16", .type = BUILTIN_FUNCTION},
    {.name = "unpackUnorm4x8", .type = BUILTIN_FUNCTION},
    {.name = "usubBorrow", .type = BUILTIN_FUNCTION},
};
static const size_t KEYWORDS_LENGTH = sizeof(KEYWORDS) / sizeof(*KEYWORDS);

#endif  // SHADEREDITOR_APP_SRC_MAIN_CPP_LEXER_C_KEYWORDS_H_
